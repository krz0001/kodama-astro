---
import { getRef } from "@utils/sanity";
import { Icon } from "astro-icon/components";
import { getWebsiteIcon } from "@src/utils";


// fetch le collaborateur qu'on te file en paramètre, choppe ses liens et affiche les en icones etc etc
// affiche aussi le rôle qu'est une string internationalisée

const { credit, locale } = Astro.props;
const collaboratorInfo = await getRef(credit.collaborator._ref);
const description =
    credit.role.find((desc) => desc._key === locale) ||
    credit.role.find((desc) => desc._key === "en");
---
<tr class="flex flex-col gap-4 w-auto pb-4 mb-4 border-b border-[#666] sm:border-0 md:m-0 md:table-row md:w-full">
    <td class='md:border-b border-[#666] md:p-4 md:pl-8'>
        {typeof collaboratorInfo.name === 'object' ? collaboratorInfo.name[locale] : collaboratorInfo.name}
    </td>
    <td class={`text-white/50 md:border-b border-[#666] md:p-4 md:pl-8`}>
        {description && description.value}
    </td>
    <td class='md:border-b border-[#666] md:p-4 md:pl-8'>
        <div class="flex flex-wrap gap-4">
            {collaboratorInfo.links &&
                Object.entries(
                    collaboratorInfo.links
                ).sort((a, b) => {
                    if (a[0] < b[0]) { return -1 }
                    if (a[0] > b[0]) { return 1 }
                    return 0
                }).map((link) => {
                    const icon = getWebsiteIcon(link[1]);
                    return (
                        <a
                            href={link[1]}
                            target="_blank"
                        >
                            <Icon 
                                name={icon}
                                class="min-w-6 w-auto fw-bold h-6 hover:text-[color:var(--releaseColor)] focus:text-[color:var(--releaseColor)] transition-all duration-200 ease-in-out"
                            />
                        </a>
                    )
                })}
        </div>
    </td>
</tr>